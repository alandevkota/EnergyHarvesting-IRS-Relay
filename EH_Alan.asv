%==========================================================================
% Date: 12/21/2021
%==========================================================================
% close all;
clear all;
disp('_________________IRS and Relay Combination________________________');
NS=input('Number of samples in 1000 ')*1000; % taking inputs
%==========================================================================
alpha_array = [0.5]; %[0 0.5 0.5]; TS factor array
Psi_ps_array = [0]; %[0.5 0 0.5]; %PS factor array
Tc = 1; %coherence time

eff = 0.8;%0.5; % Energy harvesting efficiency

bit_array = [1]; %[1 2 4];

%% system parameters
N=1;    % No. of IRSs
L=512;   % No. of elements
M=1;    % No. of BS antennas
K=1;    % No. of users 
Nr=1;   % No. of relays
sigma_N=1;  % noise power
eta=1;  % reflection coefficient
%%
%**************************************************************************
% JUST ASSUMED THAT NOSE VARIANCE ARE EQUAL FOR THE RELAY AND THE DESTINATION
%**************************************************************************
% OTHERWISE WRITE DIFFERENT CODE BELOW FOR TWO NOISE VARIANCES
%--------------------------------------------------------------------------
bandwidth = 20e6;       % channel bandwidth
noiseFigure = 10;       % noise figure at BS (in dB)
noiseVariancedBm = -174 + 10*log10(bandwidth) + noiseFigure;
noiseVariance = 10^(0.1*noiseVariancedBm);
%--------------------------------------------------------------------------
%%
for qq = 1:length(bit_array)
    bit=bit_array(qq);
    tau=pi/2^bit;
    
for kk=1:length(alpha_array)
    %% variables
    alpha = alpha_array(kk); %TS factor
    Psi_ps = Psi_ps_array(kk); %power scaling factor
%     P=logspace(-1,3,20); 
    P=linspace(0,70,30); %transmitted  power
%     gamma_bar=P; % assuming noise variance equal to 1
    gamma_bar=P/noiseVariance;
%% path-loss - correlation,large scale fading with shadowing
[Path_loss_S_IRS,Path_loss_IRS_R,Path_loss_R_D]=PathLoss_model(M,K,N,Nr);
%% simulation
Eh_sim_exct=[]; %--Energy harvest vector (like rate vector)
Eh_sim_exct_q=[]; %--Energy harvest vector with quantization
Eh_Analytical=[]; %--Energy harvest vector analytical
Eh_Analytical_q=[]; %--Energy harvest vector analytical with quantization

rate_sim_exct=[];
rate_sim_ub=[];
rate_sim_min=[]; 

rate_Analytical_ub_int=[];
rate_Analytical_ub_apx=[];
rate_final=[];

for pp=1:length(P)
    Ptx=P(pp);
    
    Eh_count_exct=0; %--EH count
    Eh_count_exct_q=0; %--EH quantized count
    
    r_gamma_out_count_exct=0;
    gamma_out_count_ub=0;
    gamma_star_count_min=0;
    
    for ns=1:NS %number of realization = NS
% actual channels----------------------------------------------------------
        alpha_h=abs(sqrt(Path_loss_S_IRS).*(randn(M,L)+1j*randn(M,L))/sqrt(2));
        alpha_g=abs(sqrt(Path_loss_IRS_R).*(randn(Nr,L)+1j*randn(Nr,L))/sqrt(2));
        alpha_f=abs(sqrt(Path_loss_R_D).*(randn(K,Nr)+1j*randn(K,Nr))/sqrt(2));
        
% SNRs calculation---------------------------------------------------------
        gamma_R=gamma_bar(pp).*sum(eta.*alpha_h.*alpha_g,2).^2;
        gamma_D=gamma_bar(pp).*alpha_f.^2;
        gamma_star=(gamma_R.*gamma_D)./(gamma_R+gamma_D+1);
        r_gamma_out_count_exct=r_gamma_out_count_exct+log2(1+gamma_star);
%         r_gamma_out_count_exct=r_gamma_out_count_exct+log2(1+gamma_star);
        gamma_out_count_ub=gamma_out_count_ub+gamma_star;
        gamma_star_count_min=gamma_star_count_min+min(gamma_R,gamma_D);   
        
        
 %xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

            E_WR = 0;
            E_WR2 = 0;
            E_WI2 = 0;

            E_V = 0; %new added 
            E_V2 = 0; %new added
            
            for ll = 1:L % I have used zeta here
                E_V = E_V + sqrt(Path_loss_S_IRS.*Path_loss_IRS_R); %new added
                E_WR = E_WR +  sqrt(Path_loss_S_IRS.*Path_loss_IRS_R);
                E_WR2 = E_WR2 +  Path_loss_S_IRS.*Path_loss_IRS_R*(0.5 + sin(2*tau)/(4*tau))...
                    - pi*pi*Path_loss_S_IRS.*Path_loss_IRS_R*sin(tau)*sin(tau)/(16*tau*tau); % this is not E[(W_R)^2], this is variance
                E_WI2 = E_WI2 +  Path_loss_S_IRS.*Path_loss_IRS_R*(0.5 - sin(2*tau)/(4*tau));
                E_V2 = E_V2 + Path_loss_S_IRS.*Path_loss_IRS_R*(1-pi*pi/16); %new added
            end
            E_WR = E_WR * eta*pi*sin(tau)/(4*tau);
            E_V = E_V * eta*pi/4; %new added 
            E_WR2 = E_WR2*eta*eta + (E_WR^2); % this is E[(W_R)^2]
            E_WI2 = E_WI2*eta*eta;
            E_V2 = E_V2*eta*eta + (E_V2^2); %new added 
         %xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        
% Assuming perfect phase cancelation---------------------------------------

         amp1=sum(eta.*alpha_h.*alpha_g,2); % breaking the expression into two parts and 1st part has amplitude of amp1
         amp2=sqrt(Psi_ps)*amp1; % second amplitude has powerscaling factor in it
         
         
         %?????????????????????????????????????????????????????????????????
         % Optimum relay gain assuming noise power equal are equal (NEEDS CHANGE IF WE USE DIFFERENT NOISE POWER FOR USER AND RELAY SIDE)
%          G_opt = sqrt(gamma_bar(pp)./(gamma_bar(pp).*(amp1).^2+1)); 
         
         G_opt = sqrt(gamma_bar(pp)./(gamma_bar(pp).*(E_V2)+1)); %new added 
         %?????????????????????????????????????????????????????????????????
         
         power=eff*Ptx*alpha*Tc*(G_opt.*alpha_f.*amp1)^2+eff*Ptx*(1-alpha)*Tc*(G_opt.*alpha_f.*amp2)^2;
         
         Eh_count_exct=Eh_count_exct+power;
% quantization
        q_error=2*tau*rand(1,L)-tau;
        amp1_q=sum(eta.*alpha_h.*alpha_g.*exp(1j*q_error),2);
        amp2_q=sqrt(Psi_ps)*amp1_q;
        
%         G_opt_q = sqrt(gamma_bar(pp)./(gamma_bar(pp).*(amp1_q).^2+1)); 
        G_opt_q = sqrt(gamma_bar(pp)./(gamma_bar(pp).*(E_WI2 + E_WR2)+1)); %new added 
        
        power_q=eff*Ptx*alpha*Tc*(abs(G_opt_q.*alpha_f).*amp1_q)^2+eff*Ptx*(1-alpha)*Tc*(G_opt_q.*alpha_f.*amp2_q)^2;
        Eh_count_exct_q=Eh_count_exct_q+power_q;
    end


    average_snr_inst_ub=gamma_out_count_ub/NS;
    average_snr_min=gamma_star_count_min/NS;    
    
% EH calculation for continuous and also for quantized --------------------

    Eh_sim_exct=[Eh_sim_exct (Eh_count_exct/NS)];
    Eh_sim_exct_q=[Eh_sim_exct_q (Eh_count_exct_q/NS)];
    
% rate calculation---------------------------------------------------------
    rate_sim_exct=[rate_sim_exct r_gamma_out_count_exct/NS];
    rate_sim_ub=[rate_sim_ub log2(1+average_snr_inst_ub)];
    rate_sim_min=[rate_sim_min log2(1+average_snr_min)];
    
        
%% EH analysis
    Mu_X=0;
    Var_X=0;
    for ll=1:L % I have used xi here instead of zeta, where zeta=xi/2
        lambda_l_sqr=eta^2.*Path_loss_S_IRS.*Path_loss_IRS_R./4;
        Mu_X=Mu_X+pi.*sqrt(lambda_l_sqr)./2;
        Var_X=Var_X+lambda_l_sqr.*(16-pi^2)./4;
    end
    Mu_R=sqrt(gamma_bar(pp))*Mu_X;
    Var_R=gamma_bar(pp)*Var_X;
    
    sigma_D=gamma_bar(pp)*Path_loss_R_D;
    psi=1/(qfunc(-Mu_R/sqrt(Var_R)));

    E_R2=Var_R+Mu_R.^2;
    tot_pwr=gamma_bar(pp)*(Path_loss_R_D)*E_R2/(gamma_bar(pp)*E_R2+1);
        tot_pwr_test=gamma_bar(pp)*(Path_loss_R_D)*E_R2/(gamma_bar(pp)*E_R2+1);
    %----------------------------------------------------------------------
    % EH analytical--------------------------------------------------------
%     Eh=eff*alpha*Tc*Ptx*tot_pwr + eff*(1-alpha)*Psi_ps*Tc*Ptx*tot_pwr ; % before test
    Eh=eff*alpha*Tc*Ptx*tot_pwr + eff*(1-alpha)*Psi_ps*Tc*Ptx*tot_pwr_test ; 
    Eh_Analytical=[Eh_Analytical Eh];
    
    % integral calculation-----------------------------------------------------
    fun_int=@(u) (sqrt(Var_R).*u+Mu_R).*qfunc(u).*exp(-(sqrt(Var_R).*u+Mu_R).^2./sigma_D);
    I_value_int=integral(fun_int,-Mu_R/sqrt(Var_R),Inf);
    average_snr_ana_ub_int=2*sqrt(Var_R)*psi*I_value_int;
    rate_Analytical_ub_int=[rate_Analytical_ub_int log2(1+average_snr_ana_ub_int)]; %try
    % analytical calculation---------------------------------------------------
    average_snr_ana_ub_apx=1/2*sigma_D*psi*(1-erf(-Mu_R/(sqrt(2*Var_R))));
    rate_Analytical_ub_apx=[rate_Analytical_ub_apx log2(1+average_snr_ana_ub_apx)];  
    
%% EH quantized analysis
%     E_WR = 0;
%     E_WR2 = 0;
%     E_WI2 = 0;
%     
%     E_V = 0; %new added 
%     E_V2 = 0; %new added
%     
%     for ll = 1:L % I have used zeta here
%         E_V = E_V + sqrt(Path_loss_S_IRS.*Path_loss_IRS_R); %new added
%         E_WR = E_WR +  sqrt(Path_loss_S_IRS.*Path_loss_IRS_R);
%         E_WR2 = E_WR2 +  Path_loss_S_IRS.*Path_loss_IRS_R*(0.5 + sin(2*tau)/(4*tau))...
%             - pi*pi*Path_loss_S_IRS.*Path_loss_IRS_R*sin(tau)*sin(tau)/(16*tau*tau); % this is not E[(W_R)^2], this is variance
%         E_WI2 = E_WI2 +  Path_loss_S_IRS.*Path_loss_IRS_R*(0.5 - sin(2*tau)/(4*tau));
%         E_V2 = E_V2 + Path_loss_S_IRS.*Path_loss_IRS_R*(1-pi*pi/16); %new added
%     end
%     E_WR = E_WR * eta*pi*sin(tau)/(4*tau);
%     E_V = E_V * eta*pi/4; %new added 
%     E_WR2 = E_WR2*eta*eta + (E_WR^2); % this is E[(W_R)^2]
%     E_WI2 = E_WI2*eta*eta;
%     E_V2 = E_V2*eta*eta + (E_V2^2); %new added 
    
    
    tot_pwr_q=G_opt_q^2*(Path_loss_R_D)*(E_WR2+E_WI2);
    % EH quantized analytical----------------------------------------------
    Eh_q=(eff*alpha*Tc*Ptx+ eff*(1-alpha)*Psi_ps*Tc*Ptx)*tot_pwr_q;
    Eh_Analytical_q=[Eh_Analytical_q Eh_q];
    
    
    SNR_avg = Ptx*G_opt_q^2*Path_loss_R_D*(E_WR2+E_WI2)/(G_opt_q^2*Path_loss_R_D*noiseVariance+noiseVariance);
    
%     SNR_test = SNR_avg/NS;
    rate_final=[rate_final log2(1+SNR_avg)]; 
    %--------------quantization ratio--------------------------------------
    quantizn_ratio_linear = 100.*Eh_sim_exct_q/Eh_sim_exct;
    
    

%% output simulation progress-----------------------------------------------    
% display 
     disp(['Simulation:solve for ' num2str(pp) ' out of ' num2str(length(P))]);
    
end
%% plotting the results
P_db=10*log10(P);
gamma_bar_db=10*log10(gamma_bar);

% figure(3)
% plot(P,Eh_sim_exct,'--o','color',[1 0 0],'LineWidth',2,'MarkerSize',9);hold on;
% plot(P,Eh_Analytical,'-','color',[0 0 1],'LineWidth',2,'MarkerSize',9);hold on;
% plot(P,Eh_sim_exct_q,'--o','color',[1 0 1],'LineWidth',2,'MarkerSize',9);hold on;
% plot(P,Eh_Analytical_q,'--s','color',[0 1 1],'LineWidth',2,'MarkerSize',9);hold on;

figure(2)
plot(P_db,Eh_sim_exct,'--o','color',[1 0 0],'LineWidth',2,'MarkerSize',9);hold on;
plot(P_db,Eh_Analytical,'-','color',[0 0 1],'LineWidth',2,'MarkerSize',9);hold on;
plot(P_db,Eh_sim_exct_q,'--o','color',[1 0 1],'LineWidth',2,'MarkerSize',9);hold on;
plot(P_db,Eh_Analytical_q,'--s','color',[0 1 1],'LineWidth',2,'MarkerSize',9);hold on;


% figure(4)
% plot(gamma_bar_db,rate_sim_exct,'--o','color',[1 0 1],'LineWidth',2,'MarkerSize',9);hold on;
% plot(gamma_bar_db,rate_sim_ub,':s','color',[0 0 1],'LineWidth',2,'MarkerSize',10);hold on;
% plot(gamma_bar_db,rate_sim_min,':s','color',[0 1 1],'LineWidth',2,'MarkerSize',10);hold on;
% plot(gamma_bar_db,rate_Analytical_ub_int,'-','color',[1 0.5 1],'LineWidth',2);hold on;
% plot(gamma_bar_db,rate_Analytical_ub_apx,'--','color',[0 0.5 0],'LineWidth',2);
% plot(gamma_bar_db,rate_final,'--','color',[0 0.5 0],'LineWidth',2);

figure(5)
plot(gamma_bar,rate_sim_exct,'--o','color',[1 0 1],'LineWidth',2,'MarkerSize',9);hold on;
plot(gamma_bar,rate_sim_ub,':s','color',[0 0 1],'LineWidth',2,'MarkerSize',10);hold on;
plot(gamma_bar,rate_sim_min,':s','color',[0 1 1],'LineWidth',2,'MarkerSize',10);hold on;
plot(gamma_bar,rate_Analytical_ub_int,'-','color',[1 0.5 1],'LineWidth',2);hold on;
plot(gamma_bar,rate_Analytical_ub_apx,'--','color',[0 0.5 0],'LineWidth',2);
plot(gamma_bar,rate_final,'--','color',[0 0.5 0],'LineWidth',2);
end
end